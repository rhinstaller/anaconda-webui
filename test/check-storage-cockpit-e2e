#!/usr/bin/python3
#
# Copyright (C) 2025 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

from anacondalib import VirtInstallMachineCase, disk_images, run_boot
from installer import Installer
from review import Review
from storage import Storage
from storagelib import StorageCase  # pylint: disable=import-error
from testlib import test_main  # pylint: disable=import-error


class TestStorageCockpitIntegration_E2E(VirtInstallMachineCase, StorageCase):
    @disk_images([('', 15), ('', 15), ('', 15)])
    def testRAIDonPartitions(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.select_disks([("vdb", True), ("vda", True), ("vdc", True)])

        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.switch_to_frame("cockpit-storage")

        # Create BIOS and boot partitions on vdb
        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.confirm()

        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        self.dialog({"size": 1, "type": "biosboot"})

        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        self.click_dropdown(self.card_row("Storage", 4), "Create partition")
        self.dialog({ "type": "empty"})

        # Create partitions for the RAID device on vdb and vdc
        self.click_dropdown(self.card_row("Storage", 5), "Create partition table")
        self.dialog({"type": "gpt"})
        self.click_dropdown(self.card_row("Storage", 6), "Create partition")
        self.dialog({"type": "empty"})

        self.click_dropdown(self.card_row("Storage", 7), "Create partition table")
        self.dialog({"type": "gpt"})
        self.click_dropdown(self.card_row("Storage", 8), "Create partition")
        self.dialog({"type": "empty"})

        # Create RAID1 on vda
        self.click_dropdown(self.card_header("Storage"), "Create MDRAID device")
        self.dialog_wait_open()
        self.dialog_set_val("level", "raid0")
        self.dialog_set_val("disks", {"vda3": True, "vdb1": True, "vdc1": True})
        self.dialog_set_val("name", "SOMERAID")
        self.dialog_apply()
        self.dialog_wait_close()
        b.wait_visible(self.card_row("Storage", name="/dev/md/SOMERAID"))

        # Format and mount the RAID device partition as /
        self.click_dropdown(self.card_row("Storage", 9), "Format")
        self.dialog({"type": "ext4", "mount_point": "/"})

        # Exit the cockpit-storage iframe and return to installation
        b.switch_to_top()
        s.return_to_installation()
        s.return_to_installation_confirm()

        i.reach(i.steps.REVIEW)

        def checkStorageReview(prefix=""):
            with b.wait_timeout(30):
                for disk in ("vda", "vdb", "vdc"):
                    r.check_disk(disk, f"16.1 GB {disk} (Virtio Block Device)")
                    r.check_disk_row(disk, "/", "vda3, vdc1, vdb1, RAID", "47.2 GB", False, prefix=prefix)

        # verify review screen
        checkStorageReview()
        r.check_checkbox_not_present()
        self.install(needs_confirmation=False)

        # Check that the expected partition layout is created and spans all the target devices
        lsblk = s.get_lsblk_json()
        block_devs = lsblk["blockdevices"]
        vda = next(dev for dev in block_devs if dev["name"] == "vda")
        vda3 = next(part for part in vda["children"] if part["name"] == "vda3")
        self.assertIn("raid0", [part["type"] for part in vda3["children"]])

        vdb = next(dev for dev in block_devs if dev["name"] == "vdb")
        vdb1 = next(part for part in vdb["children"] if part["name"] == "vdb1")
        self.assertIn("raid0", [part["type"] for part in vdb1["children"]])

        vdc = next(dev for dev in block_devs if dev["name"] == "vdc")
        vdc1 = next(part for part in vdc["children"] if part["name"] == "vdc1")
        self.assertIn("raid0", [part["type"] for part in vdc1["children"]])

        raid_root = next(part for part in vda3["children"] if part["type"] == "raid0")
        self.assertEqual(raid_root["mountpoints"], ["/"])
        self.assertEqual(raid_root["size"], "44G")

    @disk_images([("", 15), ("", 15), ("", 15)])
    @run_boot("bios", "efi")
    def testRAID0Scenario_0(self):
        """
        Test scenario with three disks:

        - 'biosboot' and '/boot' are on 'vda'.
        - A RAID 0 array is created using 'vdb' and 'vdc'.
        - The root filesystem ('/') is placed on the RAID 0 device.
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.select_disks([("vdb", True), ("vda", True), ("vdc", True)])

        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.switch_to_frame("cockpit-storage")

        # Create RAID device on vdb, and vdc
        self.click_dropdown(self.card_header("Storage"), "Create MDRAID device")
        self.dialog_wait_open()
        self.dialog_set_val("level", "raid0")
        self.dialog_set_val("disks", {"vdb": True, "vdc": True})
        self.dialog_set_val("name", "SOMERAID")
        self.dialog_apply()
        self.dialog_wait_close()

        # Create biosboot and /boot partitions on vda
        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.dialog({"type": "gpt"})
        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        if self.is_efi:
            self.dialog({"size": 100, "type": "efi", "mount_point": "/boot/efi"})
        else:
            self.dialog({"size": 1, "type": "biosboot"})
        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        # Create / partition on the RAID device
        self.click_dropdown(self.card_row("Storage", 7), "Create partition table")
        self.dialog({"type": "gpt"})
        self.click_dropdown(self.card_row("Storage", 8), "Create partition")
        self.dialog({"type": "ext4", "mount_point": "/"})

        def checkStorageReview(prefix=""):
            with b.wait_timeout(30):
                disk = "vda"
                r.check_disk(disk, f"16.1 GB {disk} (Virtio Block Device)", prefix=prefix)
                r.check_disk_row(disk, "/boot", "vda2", "1.07 GB", False, prefix=prefix)

                disk = "MDRAID-SOMERAID"
                r.check_disk(disk, f"32.2 GB {disk} (MDRAID set (stripe))", prefix=prefix)
                r.check_disk_row(disk, "/", "SOMERAID1, RAID", "32.2 GB", False, prefix=prefix)

        # Exit the cockpit-storage iframe and return to installation
        b.switch_to_top()
        s.return_to_installation()
        checkStorageReview(prefix="#cockpit-storage-integration-check-storage-dialog")
        s.return_to_installation_confirm()

        i.reach(i.steps.REVIEW)

        # verify review screen
        checkStorageReview()
        r.check_checkbox_not_present()
        self.install(needs_confirmation=False)

        # Check that the expected partition layout is created and spans all the target devices
        lsblk = s.get_lsblk_json()
        block_devs = lsblk["blockdevices"]
        vda = next(dev for dev in block_devs if dev["name"] == "vda")
        vda2 = next(part for part in vda["children"] if part["name"] == "vda2")
        self.assertEqual(vda2["mountpoints"], ["/boot"])

        vdb = next(dev for dev in block_devs if dev["name"] == "vdb")
        raid_dev = next(part for part in vdb["children"] if part["type"] == "raid0")
        raid_part = next(part for part in raid_dev["children"] if part["type"] == "part")
        self.assertEqual(raid_part["mountpoints"], ["/"])
        self.assertEqual(raid_part["size"], "30G")


    @disk_images([("", 15), ("", 15)])
    def testRAID1onDisksManual(self):
        """
        Test scenario with three disks:
        - A RAID 1 array is created using 'vda', 'vdb'
        - The bootloader, '/boot' and the root filesystem ('/') are placed manually on the RAID 1 device.
        """

        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.select_disks([("vdb", True), ("vda", True)])

        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.switch_to_frame("cockpit-storage")

        def createRAID_Manual(raid_level="raid1"):
            # Create RAID device on vda, vdb
            self.click_dropdown(self.card_header("Storage"), "Create MDRAID device")
            self.dialog_wait_open()
            self.dialog_set_val("level", raid_level)
            self.dialog_set_val("disks", {"vda": True, "vdb": True})
            self.dialog_set_val("name", f"SOMERAID-{raid_level}")
            self.dialog_apply()
            self.dialog_wait_close()

            # Create biosboot and /boot partitions on vda
            self.click_dropdown(self.card_row("Storage", 3), "Create partition table")
            self.dialog({"type": "gpt"})
            b.wait_in_text(self.card_row("Storage", name=f"md/SOMERAID-{raid_level}"), "GPT")
            self.click_dropdown(self.card_row("Storage", 4), "Create partition")
            self.dialog({"size": 1, "type": "biosboot"})
            self.click_dropdown(self.card_row("Storage", 5), "Create partition")
            self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})
            self.click_dropdown(self.card_row("Storage", 6), "Create partition")
            self.dialog({"type": "ext4", "mount_point": "/"})

        # RAID0 should not be allowed for the bootloaders
        createRAID_Manual("raid0")

        # Exit the cockpit-storage iframe and return to installation
        b.switch_to_top()
        s.return_to_installation("Failed to find a suitable stage1 device")
        s.return_to_installation_cancel()
        b.switch_to_frame("cockpit-storage")

        self.click_dropdown(self.card_row("Storage", 3), "Delete")
        self.dialog_apply()
        b.wait_not_present(self.card_row("Storage", name="md/SOMERAID-raid0"))

        # Create biosboot and /boot partitions on vda
        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.dialog({"type": "empty"})
        b.wait_not_present(self.card_row("Storage", name="Free space"))

        createRAID_Manual("raid1")

        # Exit the cockpit-storage iframe and return to installation
        b.switch_to_top()
        s.return_to_installation()

        def checkStorageReview(prefix=""):
            with b.wait_timeout(30):
                disk = "MDRAID-SOMERAID-raid1"
                r.check_disk(disk, f"16.1 GB {disk} (MDRAID set (mirror))", prefix=prefix)

        # verify review screen
        checkStorageReview(prefix="#cockpit-storage-integration-check-storage-dialog")
        s.return_to_installation_confirm()

        i.reach(i.steps.REVIEW)

        # verify review screen
        checkStorageReview()
        self.install(needs_confirmation=False)

        # Check that the expected partition layout is created and spans all the target devices
        lsblk = s.get_lsblk_json()
        block_devs = lsblk["blockdevices"]

        vda = next(dev for dev in block_devs if dev["name"] == "vda")
        raid_dev = next(part for part in vda["children"] if part["type"] == "raid1")
        raid_boot = next(part for part in raid_dev["children"] if part["name"] == "md127p2")
        raid_root = next(part for part in raid_dev["children"] if part["name"] == "md127p3")
        self.assertEqual(raid_boot["mountpoints"], ["/boot"])
        self.assertEqual(raid_root["mountpoints"], ["/"])


if __name__ == '__main__':
    test_main()
