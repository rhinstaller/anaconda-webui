#!/usr/bin/python3
#
# Copyright (C) 2024 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

import os

from anacondalib import VirtInstallMachineCase, disk_images, run_boot
from installer import Installer
from review import Review
from storage import Storage
from testlib import nondestructive, skipImage, test_main  # pylint: disable=import-error
from utils import pretend_default_scheme

TEST_DIR = os.path.dirname(__file__)
ROOT_DIR = os.path.dirname(TEST_DIR)
BOTS_DIR = f'{ROOT_DIR}/bots'


class TestStorageHomeReuseFedora(VirtInstallMachineCase):
    def _remove_unknown_mountpoints(self):
        # Remove the /var subvolume from the default btrfs layout
        # as /var/ is not default mount point in Fedora which results in
        # the 'Reinstall Fedora' option to get hidden
        self.machine.execute("""
            mount /dev/vda4 /mnt;
            btrfs subvolume delete /mnt/var/lib/machines;
            btrfs subvolume delete /mnt/var;
            umount /mnt
        """)

    def _testBasic_partition_disk(self):
        self._remove_unknown_mountpoints()

    @run_boot("bios", "efi")
    @disk_images([("fedora-rawhide", 15)])
    @nondestructive
    def testBasic(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="home-reuse")
        s = Storage(b, m)
        r = Review(b, m)

        pretend_default_scheme(self, "BTRFS")
        dev="vda"

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        s.set_partitioning("home-reuse")
        i.reach(i.steps.REVIEW)

        # check selected disks are shown
        r.check_disk(dev, f"16.1 GB {dev} (Virtio Block Device)")
        r.check_disk_row(dev, parent=f"{dev}3", action="delete")
        if self.is_efi:
            r.check_disk_row(dev, parent=f"{dev}2", action="delete")
        else:
            r.check_disk_row(dev, parent=f"{dev}1", action="delete")

        if self.is_efi:
            r.check_disk_row(dev, "/boot/efi", f"{dev}2", "629 MB", True, "efi", is_encrypted=False)
        r.check_disk_row(dev, "/boot", f"{dev}3", "1.07 GB", True, "xfs", is_encrypted=False)
        r.check_disk_row(dev, "/", f"{dev}4", "12.8 GB", True, "btrfs", is_encrypted=False)
        r.check_disk_row(dev, "/home", f"{dev}4", "12.8 GB", False, "btrfs", is_encrypted=False,
                         action="mount")

    @disk_images([("fedora-rawhide", 15)])
    @nondestructive
    def testHidden(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="home-reuse")
        s = Storage(b, m)

        pretend_default_scheme(self, "BTRFS")

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        # The `Re-install Fedora` scenario should not be available
        # when unexpected mount points are present
        s.wait_scenario_visible("home-reuse", False)

    def move_standard_fedora_disk_to_encrypted(self, encrypted_disk, new_disk, password):
        b = self.browser
        m = self.machine
        s = Storage(b, m)

        disk = encrypted_disk
        dev = encrypted_disk.split("/")[-1]
        dev_fedora = new_disk

        s.partition_disk(disk, [("1MiB", "biosboot"), ("1MiB", "efi"), ("1GiB", "ext4"), ("", None)])

        # Create standard encrypted btrfs layout in the empty disk and copy the data from the fedora
        # disk to emulate the Fedora encrypted layout
        # Then eject the fedora disk
        self.machine.execute(f"""
        set -xe

        # Create encrypted btrfs layout
        echo {password} | cryptsetup luksFormat {disk}4
        echo {password} | cryptsetup luksOpen {disk}4 crypt
        mkfs.btrfs /dev/mapper/crypt
        mount /dev/mapper/crypt /mnt
        btrfs subvolume create /mnt/root
        btrfs subvolume create /mnt/home

        # Copy data from the first disk / to the new disk
        mkdir -p /mnt-fedora
        mount /dev/{dev_fedora}4 /mnt-fedora
        rsync -pogAXtlHrDx \
            --stats \
            --exclude=/dev/* \
            --exclude=/proc/* \
            --exclude=/sys/* \
            --exclude=/tmp/* \
            --exclude=/run/* \
            --exclude=/mnt/* \
            --exclude=/media/* \
            --exclude=/lost+found \
            --exclude=/var/lib/machines \
            --exclude=/var \
            /mnt-fedora/* /mnt

        # Adjust /etc/fstab to contain the new device UUIDS
        echo "UUID=$(blkid -s UUID -o value /dev/mapper/crypt) / btrfs defaults,subvol=root 0 0" > /mnt/root/etc/fstab
        echo "UUID=$(blkid -s UUID -o value /dev/mapper/crypt) /home btrfs defaults,subvol=home 0 0" >> /mnt/root/etc/fstab
        echo "UUID=$(blkid -s UUID -o value /dev/{dev}3) /boot ext4 defaults 0 0" >> /mnt/root/etc/fstab

        umount /mnt-fedora
        umount /mnt
        cryptsetup close crypt

        # Do the same for /boot
        mount /dev/{dev}3 /mnt
        mount /dev/{dev_fedora}3 /mnt-fedora
        rsync -aAXHv /mnt-fedora/ /mnt/

        umount /mnt-fedora
        umount /mnt
        """, timeout=90)

    def _testHomeReuseFedoraEncrypted_partition_disk(self):
        self._remove_unknown_mountpoints()
        self.move_standard_fedora_disk_to_encrypted("/dev/vda", "vdb", "einszwei")

    @disk_images([("fedora-rawhide", 15), ("fedora-41", 15)])
    def testHomeReuseFedoraEncrypted(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="home-reuse")
        s = Storage(b, m)
        r = Review(b, m)

        pretend_default_scheme(self, "BTRFS")

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.select_disks([("vda", True), ("vdb", False)])

        s.unlock_all_encrypted()
        s.unlock_device("einszwei", ["vda4"], ["vda4"])
        s.set_partitioning("home-reuse")
        i.reach(i.steps.REVIEW)

        # check selected disks are shown
        dev = "vda"
        r.check_disk(dev, f"16.1 GB {dev} (Virtio Block Device)")
        r.check_disk_row(dev, parent=f"{dev}3", action="delete")
        r.check_disk_row(dev, parent=f"{dev}1", action="delete")
        r.check_disk_row(dev, "/boot", f"{dev}3", "1.07 GB", True, "xfs", is_encrypted=False)
        r.check_disk_row(dev, "/", f"{dev}4", "15.0 GB", True, "btrfs", is_encrypted=True)
        r.check_disk_row(dev, "/home", f"{dev}4", "15.0 GB", False, "btrfs", is_encrypted=True, action="mount")

    def _testMultipleRoots_partition_disk(self):
        self._remove_unknown_mountpoints()

    @disk_images([("fedora-rawhide", 15), ("fedora-41", 15), ("ubuntu-stable", 15)])
    @skipImage("btrfs support missing on fedora-eln image", "fedora-eln-boot")
    @nondestructive
    def testMultipleRoots(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="home-reuse")
        s = Storage(b, m)
        r = Review(b, m)

        dev_fedora1 = "vda"
        dev_fedora2 = "vdb"
        dev_ubuntu = "vdc"

        pretend_default_scheme(self, "BTRFS")

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        # Select both Fedora disks and verify that home reuse is not available
        s.select_disks([(dev_fedora1, True), (dev_fedora2, True), (dev_ubuntu, False)])
        s.wait_scenario_visible("home-reuse", False)

        # Select only single Ubuntu disk and verify that home reuse is not available
        s.select_disks([(dev_fedora1, False), (dev_fedora2, False), (dev_ubuntu, True)])
        s.wait_scenario_visible("home-reuse", False)

        # Select Ubuntu disk and Fedora disk and verify that home reuse is not available
        s.select_disks([(dev_fedora1, True), (dev_fedora2, False), (dev_ubuntu, True)])
        s.wait_scenario_visible("home-reuse", False)

        # Select only single Fedora disk and verify that home reuse is available
        s.select_disks([(dev_fedora1, True), (dev_fedora2, False), (dev_ubuntu, False)])
        s.wait_scenario_visible("home-reuse", True)
        s.wait_scenario_available("home-reuse", True)

        s.set_partitioning("home-reuse")
        i.reach(i.steps.REVIEW)

        # check selected disks are shown
        r.check_disk(dev_fedora1, f"16.1 GB {dev_fedora1} (Virtio Block Device)")
        r.check_disk_row(dev_fedora1, parent=f"{dev_fedora1}3", action="delete")
        r.check_disk_row(dev_fedora1, parent=f"{dev_fedora1}1", action="delete")
        r.check_disk_row(dev_fedora1, "/boot", f"{dev_fedora1}3", "1.07 GB", True, "xfs", is_encrypted=False)
        r.check_disk_row(dev_fedora1, "/", f"{dev_fedora1}4", "12.8 GB", True, "btrfs", is_encrypted=False)
        r.check_disk_row(dev_fedora1, "/home", f"{dev_fedora1}4", "12.8 GB", False, "btrfs", is_encrypted=False,
                         action="mount")


if __name__ == '__main__':
    test_main()
