#!/usr/bin/python3
#
# Copyright (C) 2021 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

from anacondalib import VirtInstallMachineCase
from installer import Installer
from testlib import nondestructive, test_main  # pylint: disable=import-error
from utils import get_pretty_name


@nondestructive
class TestBasic(VirtInstallMachineCase):

    def testNavigation(self):
        """
        Description:
            Verifies that all steps in the installer are accessible via 'Next' button

        Expected results:
            - All steps are reachable by clicking on the 'Next' button
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m)

        i.open()

        self.assertIn(
            b.attr("#app .pf-v6-c-page", "data-debug").lower(),
            ["false", "true"]
        )

        i.check_prerelease_info()
        # Do not start the installation in non-destructive tests as this performs non revertible changes
        # with the pages basically empty of common elements (as those are provided by the top-level installer widget)
        # we at least iterate over them to check this works as expected
        i.reach(i.steps.REVIEW)

        # Ensure that the 'actual' UI process is running/
        self.assertIn("/usr/libexec/anaconda/webui-desktop", m.execute("ps aux"))

    def testSidebarNavigation(self):
        """
        Description:
            Verifies navigation to previous steps using the sidebar

        Expected results:
            - All previous steps are reachable by clicking on the sidebar
            - Later steps are disabled in the sidebar
        """

        b = self.browser
        m = self.machine
        i = Installer(b, m)

        i.open()

        i.check_prerelease_info()

        # Test that clicking on current step does not break navigation
        i.click_step_on_sidebar()

        i.reach(i.steps.REVIEW)

        # Test going back
        steps = [
            i.steps.ACCOUNTS,
            i.steps.STORAGE_CONFIGURATION,
            i.steps.INSTALLATION_METHOD,
            i.steps.LANGUAGE,
        ]

        for step in steps:
            if step not in i.steps.hidden_steps:
                i.click_step_on_sidebar(step)

        i.reach(i.steps.REVIEW)

        # Check disabling of later steps when going back
        i.reach_on_sidebar(i.steps.LANGUAGE)
        for step in [
            i.steps.ACCOUNTS,
            i.steps.STORAGE_CONFIGURATION,
            i.steps.INSTALLATION_METHOD,
            i.steps.REVIEW,
        ]:
            i.check_sidebar_step_disabled(step)

    def testAboutModal(self):
        """
        Description:
            Test the About modal

        Expected results:
            - The About modal is shown when clicking on the "About" item in the kebab menu
            - The About modal contains the correct information
            - The About modal can be closed
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m)

        i.open()

        # Obtain pretty name and versions from the CLI
        pretty_name = get_pretty_name(m)
        version = m.execute("anaconda --version | cut -d ' ' -f 2 | tail -1")

        # Click on the kebab
        b.click("#toggle-kebab")

        # Click on the "About" item from the dropdown
        b.click("#about-modal-dropdown-item-about")

        # Expect PRETTY_NAME to be shown in modal title
        b.wait_in_text("#about-modal-title", pretty_name)

        # Expect "Powered by Anaconda" to be shown in modal subtitle
        b.wait_in_text("#about-modal-subtitle", "Powered by Anaconda")

        # Expect About modal body to be shown
        b.wait_in_text("#about-modal-versions dt", "Anaconda")
        b.wait_in_text("#about-modal-versions dd", version.strip())

        # Expect button link for Anaconda project page to be shown
        b.wait_in_text("#anaconda-page-button", "Anaconda project page")

        # Pixel test the language step
        b.assert_pixels(
            ".pf-v6-c-about-modal-box",
            "about-modal",
            ignore=["#about-modal-versions dd"],
        )

        # Close about modal
        b.click(".pf-v6-c-button[aria-label='Close Dialog']")
        b.wait_not_present("#about-modal")

    def testReportIssue(self):
        """
        Description:
            Test the Report Issue modal

        Expected results:
            - The Report Issue modal is shown when clicking on the "Report issue" item in the kebab menu
            - The Report Issue modal contains the correct information
            - The Report Issue modal can be closed
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m)

        i.open()

        b.wait_not_present("#user-issue-bz-report-modal")

        b.click("#toggle-kebab")
        b.click("#about-modal-dropdown-item-report")
        b.wait_visible("#user-issue-bz-report-modal")
        b.click("#user-issue-dialog-cancel-btn")
        b.wait_not_present("#user-issue-bz-report-modal")

    def testJsErrorHandling(self):
        """
        Description:
            Test that the Error modal is shown when a JS error occurs

        Setup:
            - Trigger a JS error

        Expected results:
            - The Error modal is shown
            - The Error modal contains the correct information
            - The Journal contains the exception
        """

        b = self.browser
        m = self.machine
        i = Installer(b, m)

        i.open()

        b.wait_not_present("#critical-error-bz-report-modal")

        b.eval_js("window.setTimeout(function() { myNonExistingFunction()}, 0);")
        b.wait_in_text("#critical-error-bz-report-modal-details", "myNonExistingFunction is not defined")

        b.wait_visible("a:contains('Report issue'):not([disabled])")
        b.assert_pixels(
            "#critical-error-bz-report-modal",
            "js-error-modal",
            ignore=["#critical-error-bz-report-modal-review-log"]
        )

        # Check the exception is present in the journal
        self.assertIn(
            "myNonExistingFunction is not defined",
            m.execute("journalctl -b -t anaconda-webui")
        )


if __name__ == '__main__':
    test_main()
