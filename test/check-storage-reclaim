#!/usr/bin/python3
#
# Copyright (C) 2024 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

from anacondalib import VirtInstallMachineCase, disk_images
from installer import Installer
from operating_systems import WindowsOS
from review import Review
from storage import Storage
from testlib import (
    nondestructive,
    test_main,
)


@nondestructive
class TestStorageReclaimSpace(VirtInstallMachineCase):
    def setup_partitions(self, s):
        disk = "/dev/vda"
        btrfsname = "btrfstest"
        s.partition_disk(
            disk,
            [
                ("1MiB", "biosboot"),
                ("4GiB", "ext4"),
                ("5GiB", "btrfs", "-f", "-L", f"{btrfsname}A"),
                ("", "btrfs", "-f", "-L", f"{btrfsname}B"),
            ],
        )

    def _testReclaimSpaceOptional_partition_disk(self):
        b = self.browser
        m = self.machine
        s = Storage(b, m)

        disk = "/dev/vda"
        btrfsname = "btrfstest"
        s.partition_disk(
            disk,
            [
                ("1MiB", "biosboot"),
                ("1GiB", "ext4"),
                ("5GiB", "btrfs", "-f", "-L", f"{btrfsname}A"),
            ],
        )

    def testReclaimSpaceOptional(self):
        """
        Description:
            Test the reclaim space scenario when there is enough free space
            for the installation.

        Expected results:
            - The reclaim space checkbox is not selected by default.
            - The reclaim space checkbox is enabled.
        """

        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        dev = "vda"

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        s.set_scenario("use-free-space")
        s.reclaim_check_checkbox(False, False)

        s.reclaim_set_checkbox(True)
        i.next(True)

        # Test cancelled reclaim is not taking effect
        s.reclaim_remove_device("vda2")
        s.reclaim_check_action_present("vda2", "delete", True)
        s.reclaim_modal_cancel()

        # Continue without reclaiming space
        s.reclaim_check_checkbox(True, False)
        s.reclaim_set_checkbox(False)

        i.reach(i.steps.REVIEW)

        r.check_disk_row(dev, "/", "vda5, LVM", "8.59 GB", True, "xfs")

    def _testReclaimSpaceDeleteBtrfsSubvolumes_partition_disk(self):
        b = self.browser
        m = self.machine
        s = Storage(b, m)

        self.setup_partitions(s)

    def testReclaimSpaceDeleteBtrfsSubvolumes(self):
        """
        Description:
            Test the reclaim space scenario with deleting BTRFS subvolumes

        Expected results:
            - The BTRFS subvolumes can be deleted in the reclaim space dialog.
            - Deleting a parent partition will delete all contained partitions.
            - The delete operation can be undone.
            - The installation can proceed after deleting
            - The installation can proceed after allocating enough space by deleting partitions.
        """

        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        s.set_scenario("use-free-space")
        s.reclaim_check_checkbox(True, True)
        i.next(True)

        s.reclaim_check_available_space("2.06 MB")

        # Check that all partitions are present
        s.reclaim_check_device_row("vda (Virtio", "", "disk", "16.1 GB")
        s.reclaim_check_device_row("vda1", "", "biosboot", "1.05 MB")
        s.reclaim_check_device_row("vda2", "", "ext4", "4.29 GB")
        s.reclaim_check_device_row("vda3", "", "btrfs", "5.37 GB")
        s.reclaim_check_device_row("vda4", "", "btrfs", "6.44 GB")

        # Check that deleting a disk will delete all contained partitions
        s.reclaim_remove_device("vda (Virtio")
        for device in ["vda1", "vda2", "vda3"]:
            s.reclaim_check_action_present(device, "delete")

        s.reclaim_check_available_space("16.1 GB")

        # Undo disk device deletion
        s.reclaim_undo_action("vda (Virtio")
        for device in ["vda1", "vda2", "vda3"]:
            s.reclaim_check_action_present(device, "delete", False)

        s.reclaim_check_available_space("2.06 MB")

        # Check that actions for devices whose parents are marked for deletion are not sent to blivet
        s.reclaim_remove_device("vda4")
        s.reclaim_remove_device("vda (Virtio")
        s.reclaim_modal_submit()

        i.back()
        s.reclaim_check_checkbox(True, True)
        i.next(True)

        # Remove one partition and allocate enough space for the installation
        s.reclaim_remove_device("vda4")
        s.reclaim_check_action_present("vda4", "delete", True)
        s.reclaim_check_available_space("6.44 GB")

        # Check that deleting a parent disk which contains partitions marked for deletion
        # correctly calculates the available space
        s.reclaim_remove_device("vda (Virtio")
        s.reclaim_check_available_space("16.1 GB")
        s.reclaim_undo_action("vda (Virtio")
        s.reclaim_check_available_space("6.44 GB")

        s.reclaim_modal_submit()
        i.reach(i.steps.REVIEW)

        r.check_disk_row("vda", parent="vda4", action="delete")

    def _testReclaimSpaceShrinkBtrfsSubvolumes_partition_disk(self):
        b = self.browser
        m = self.machine
        s = Storage(b, m)

        self.setup_partitions(s)

    def testReclaimSpaceShrinkBtrfsSubvolumes(self):
        """
        Description:
            Test the reclaim space scenario with shrinking partitions

        Expected results:
            - The shrinking is not available for disks.
            - Shrinking BTRFS subvolumes is not available.
            - A warning is shown when trying to shrink a partition too much.
            - The shrinking operation can be undone.
            - The installation can proceed after allocating enough space by shrinking partitions.
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        s.set_scenario("use-free-space")
        i.next(True)

        s.reclaim_check_available_space("2.06 MB")

        # Check that shrinking action is only available for partitions
        s.reclaim_check_action_button_present("vda (Virtio", "shrink", False)
        for device in ["vda2"]:
            s.reclaim_check_action_button_present(device, "shrink", True)

        for device in ["vda3", "vda4"]:
            # Shrinking Btrfs partitions is not yet supported by blivet:
            # https://bugzilla.redhat.com/show_bug.cgi?id=962143
            s.reclaim_check_action_button_present(device, "shrink", True, True)

        # Shrink a partition too much and expect a warning
        s.reclaim_shrink_device("vda2", "0.100", "4.29")
        s.reclaim_modal_submit_and_check_warning("Unable to schedule resizing of vda2")
        s.reclaim_undo_action("vda2")

        # Shrink a partition
        s.reclaim_shrink_device("vda2", "1", "4.29")
        s.reclaim_check_available_space("3.30 GB")

        # Undo the shrink actions
        for device in ["vda2"]:
            s.reclaim_undo_action(device)
            s.reclaim_check_action_present(device, "shrink", False)

        s.reclaim_check_available_space("2.06 MB")

        # Shrink one partition and allocate enough space for the installation
        s.reclaim_shrink_device("vda2", "1", "4.29")

        s.reclaim_modal_submit()
        i.reach(i.steps.REVIEW)

        r.check_disk_row("vda", parent="vda2", size="1.00 GB", action="resized from 4.29 GB")

    def _testExtendedPartitionEFI_partition_disk(self):
        b = self.browser
        m = self.machine
        s = Storage(b, m)

        # Configure disk layout with a logical Btrfs partition
        disk = "/dev/vda"
        s.partition_disk(
            disk,
            [
                ("512MB", "efi"),
                ("2GB", "swap"),
                ("8GB", "ext4"),
                ("", "extended"),
                ("2.5GB", "logical"),
            ],
            is_mbr=True
        )

        # Create subvolumes for the logical Btrfs partition
        m.execute(f"""
        mkfs.btrfs -f -L BTRFS {disk}5
        mount {disk}5 /mnt
        btrfs subvolume create /mnt/@subvol1
        btrfs subvolume create /mnt/@subvol2
        umount /mnt
        """)

    def testExtendedPartitionEFI(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        s.set_scenario("use-free-space")
        s.reclaim_set_checkbox(True)
        i.next(True)

        s.reclaim_check_device_row("vda (Virtio", "", "disk", "16.1 GB")
        s.reclaim_check_device_row("vda1", "", "vfat", "512 MB")
        s.reclaim_check_device_row("vda2", "", "swap", "2.00 GB")
        s.reclaim_check_device_row("vda3", "", "ext4", "8.00 GB")
        s.reclaim_check_device_row("vda4", "", "extended partition", "")
        s.reclaim_check_device_row("vda5", "", "btrfs", "2.50 GB")
        s.reclaim_check_device_row("", "BTRFS", "btrfs volume", "")
        s.reclaim_check_device_row("", "@subvol1", "btrfs subvolume", "")
        s.reclaim_check_device_row("", "@subvol2", "btrfs subvolume", "")

        # Remove only the logical Btrfs partition (vda5)
        s.reclaim_remove_device("vda5")
        s.reclaim_check_action_present("vda5", "delete", True)

        # Add a pixel test for the reclaim space dialog
        b.assert_pixels(
            "#reclaim-space-modal",
            "reclaim-space-modal-logical-btrfs-layout",
            ignore=["#reclaim-space-modal-hint"],
        )

        s.reclaim_modal_submit()

        # Verify that the selected partitions are marked for deletion on the review screen
        i.reach(i.steps.REVIEW)
        for device in ["vda5", "vda4"]:
            r.check_disk_row("vda", parent=device, action="delete")


    def _testReclaimExt4onLUKS_partition_disk(self):
        b = self.browser
        m = self.machine
        s = Storage(b, m)

        disk = "/dev/vda"
        s.partition_disk(disk, [("4GiB", "ext4")])
        s.create_luks_partition(f"{disk}1", "einszweidrei", "encrypted-vol")

    def testReclaimExt4onLUKS(self):
        """
        Description:
            Test the reclaim space scenario with LUKS partitions

        Expected results:
            - The LUKS partition cannot be shrunk
            - The LUKS partition can be deleted
            - The installation can proceed after deleting the LUKS partition - password is not needed
        """
        # Shrinking LUKS partitions is not yet supported
        # Deletion of locked partitions should be possible

        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        s.set_scenario("use-free-space")
        s.reclaim_set_checkbox(True)
        i.next(True)

        b.wait_visible("#reclaim-space-modal")
        b.assert_pixels(
            "#reclaim-space-modal",
            "reclaim-space-modal-encrypted",
            ignore=["#reclaim-space-modal-hint"],
        )

        s.reclaim_check_device_row("vda1", "", "luks", "4.29 GB", locked=True)
        s.reclaim_check_action_button_present("vda1", "shrink", True, True)
        s.reclaim_check_action_button_present("vda1", "delete", True)

    @disk_images([("fedora-rawhide", 15)])
    def testDeletePartition(self):
        """
        Description:
            Test reclaiming space from an existing Fedora system by deleting partitions

        Expected results:
            - The review screen shows the affected system when partitions from an existing system are deleted
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.set_scenario("use-free-space")
        i.next(True)
        b.wait_visible("#reclaim-space-modal")

        b.assert_pixels(
            "#reclaim-space-modal",
            "reclaim-space-modal-fedora",
            ignore=["td[data-label=Space]", "#reclaim-space-modal-hint"],
        )

        s.reclaim_remove_device("vda4")
        s.reclaim_modal_submit()

        i.reach(i.steps.REVIEW)
        r.check_affected_system("Fedora Linux", [("vda4", ["home", "root", "var"])])
        r.check_some_erased_checkbox_label()


    def _testReclaimSpaceWindows_partition_disk(self):
        WindowsOS(machine=self.machine).partition_disk()

    @disk_images([("", 20)])
    def testReclaimSpaceWindows(self):
        """
        Description:
            Test reclaiming space from an existing Windows system by deleting partitions

        Expected results:
            - The Windows partitions are identified and displayed in the reclaim space dialog
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.set_scenario("use-free-space")
        s.reclaim_set_checkbox(True)
        i.next(True)

        b.wait_visible("#reclaim-space-modal")
        b.assert_pixels(
            "#reclaim-space-modal",
            "reclaim-space-modal-windows",
            ignore=["td[data-label=Space]", "#reclaim-space-modal-hint"],
        )

    @disk_images([("ubuntu-stable", 15)])
    def testReclaimSpaceShrink(self):
        """
        Description:
            Test reclaiming space from an existing Ubuntu system by resizing partitions

        Expected results:
            - The review screen shows the affected system when partitions from an existing system are resized
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.set_scenario("use-free-space")
        s.reclaim_set_checkbox(True)
        i.next(True)

        s.reclaim_shrink_device("vda1", "7", rowIndex=3)
        s.reclaim_modal_submit()

        i.reach(i.steps.REVIEW)
        # Don't specify the exact original size as this might change with image refreshes
        r.check_disk_row("vda", parent="vda1", size="7.00 GB", action="resized from")
        r.check_resized_system("Ubuntu", ["vda1"])


if __name__ == '__main__':
    test_main()
