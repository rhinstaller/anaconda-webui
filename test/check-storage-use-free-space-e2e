#!/usr/bin/python3
#
# Copyright (C) 2024 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

from anacondalib import VirtInstallMachineCase, disk_images, run_boot
from installer import Installer
from operating_systems import DualBootHelper_E2E
from review import Review
from storage import Storage
from testlib import test_main  # pylint: disable=import-error


class TestStorageUseFreeSpace_E2E(DualBootHelper_E2E, VirtInstallMachineCase):

    @disk_images([("debian-testing", 20)])
    @run_boot("bios", "efi")
    def testScenarioUseFreeSpace(self):
        """
        Description:
            Test dual boot installation with use free space scenario with debian

        Expected results:
            - The installer should be able to install the system using free space
        """
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        r = Review(b, m)
        s = Storage(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.check_scenario_selected("use-free-space")
        i.next()
        s.check_encryption_selected(False)
        i.reach(i.steps.REVIEW)
        r.check_checkbox_not_present()

        self.install(needs_confirmation=False)
        root_one_size_bytes = m.execute("blockdev --getsize64 /dev/vda3")
        root_one_size = round(int(root_one_size_bytes) / 1024 / 1024 / 1024, 1)
        if int(root_one_size) == float(root_one_size):
            root_one_size = int(root_one_size)
        root_two_size = round(18.9 - root_one_size, 1)
        self.verifyDualBootDebian(root_one_size=root_one_size, root_two_size=root_two_size)


if __name__ == '__main__':
    test_main()
