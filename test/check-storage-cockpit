#!/usr/bin/python3
#
# Copyright (C) 2024 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

from anacondalib import VirtInstallMachineCase, disk_images, pixel_tests_ignore, run_boot
from installer import Installer
from review import Review
from storage import Storage
from storagelib import StorageCase  # pylint: disable=import-error
from testlib import nondestructive, test_main  # pylint: disable=import-error
from utils import pretend_live_iso


class TestStorageCockpitIntegration(VirtInstallMachineCase, StorageCase):
    @nondestructive
    def testBasicLiveISO(self):
        # Test that the 'Modify storage' button is available on the first page
        # https://bugzilla.redhat.com/show_bug.cgi?id=2336488
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)

        pretend_live_iso(self, i, m)

        i.open()
        i.next()
        s.check_disk_selected("vda")
        s.modify_storage()
        s.confirm_entering_cockpit_storage()

    @nondestructive
    def testEncryptedUnlock(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        dev = "vda"

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.wait_scenario_visible("use-configured-storage", False)
        s.check_disk_selected("vda")
        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.wait_visible(".cockpit-storage-integration-sidebar")

        frame = "iframe[name='cockpit-storage']"
        b._wait_present(frame)
        b.switch_to_frame("cockpit-storage")
        b._wait_present("#storage.ct-page-fill")

        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.confirm()

        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        self.dialog({"size": 1, "type": "biosboot"})

        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        self.click_dropdown(self.card_row("Storage", 4), "Create partition")
        self.dialog({
            "type": "ext4", "mount_point": "/",
            "crypto": self.default_crypto_type,
            "passphrase": "redhat",
            "passphrase2": "redhat",
        })

        # Exit the cockpit-storage iframe
        b.switch_to_top()

        s.return_to_installation()
        s.return_to_installation_confirm()

        s.check_scenario_selected("use-configured-storage")

        # Check that choosing another storage scenario without diving into that,
        # preserves the visibility of "Use configured storage"
        s.set_scenario("erase-all")
        s.wait_scenario_available("use-configured-storage")

        s.set_scenario("use-configured-storage")

        i.reach(i.steps.REVIEW)

        r.check_disk_row(dev, "/", "vda3", "15.0 GB", False, None, True)

    @nondestructive
    def testLVM(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        vgname = "fedoravg"
        dev = "vda"

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.wait_scenario_visible("use-configured-storage", False)
        s.check_disk_selected("vda")
        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.wait_visible(".cockpit-storage-integration-sidebar")

        frame = "iframe[name='cockpit-storage']"
        b._wait_present(frame)
        b.switch_to_frame("cockpit-storage")
        b._wait_present("#storage.ct-page-fill")

        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.confirm()

        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        self.dialog({"size": 1, "type": "biosboot"})

        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        self.click_devices_dropdown("Create LVM2 volume group")
        self.dialog({"name": vgname, "disks": {dev: True}})

        self.click_card_row("Storage", name=vgname)

        b.click(self.card_button("LVM2 logical volumes", "Create new logical volume"))
        self.dialog({"name": "root", "size": 6010})
        self.click_card_row("LVM2 logical volumes", 1)
        self.click_card_dropdown("Unformatted data", "Format")
        self.dialog({"type": "ext4", "mount_point": "/"})

        b.click(self.card_parent_link())

        b.click(self.card_button("LVM2 logical volumes", "Create new logical volume"))
        self.dialog({"name": "home", "size": 8120})
        self.click_card_row("LVM2 logical volumes", 1)
        self.click_card_dropdown("Unformatted data", "Format")
        self.dialog({"type": "ext4", "mount_point": "/home"})

        b.click(self.card_parent_link())

        b.click(self.card_button("LVM2 logical volumes", "Create new logical volume"))
        self.dialog({"name": "swap", "size": 898})
        self.click_card_row("LVM2 logical volumes", 3)
        self.click_card_dropdown("Unformatted data", "Format")
        self.dialog({"type": "swap"})

        # Exit the cockpit-storage iframe
        b.switch_to_top()

        def checkStorageReview(prefix=""):
            disk = "vda"
            r.check_disk(disk, "16.1 GB vda (Virtio Block Device)", prefix=prefix)
            r.check_disk_row(disk, "/boot", "vda2", "1.07 GB", False, prefix=prefix)
            r.check_disk_row(disk, "/", "vda3, LVM", "6.01 GB", False, prefix=prefix)
            r.check_disk_row(disk, "/home", "vda3, LVM", "8.12 GB", False, prefix=prefix)
            r.check_disk_row(disk, "swap", "vda3, LVM", "898 MB", False, prefix=prefix)

        s.return_to_installation()

        # verify storage layout review in Cockpit storage exit dialog
        checkStorageReview(prefix="#cockpit-storage-integration-check-storage-dialog")
        b.assert_pixels(
            "#cockpit-storage-integration-check-storage-dialog",
            "cockpit-storage-integration-check-storage-dialog-LVM",
            ignore=pixel_tests_ignore,
        )
        s.return_to_installation_confirm()

        s.set_scenario("use-configured-storage")

        i.reach(i.steps.REVIEW)

        # verify review screen
        checkStorageReview()

    @nondestructive
    @run_boot("efi")
    def testBtrfsTopLevelVolume(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.wait_scenario_visible("use-configured-storage", False)
        s.check_disk_selected("vda")
        s.modify_storage()
        s.confirm_entering_cockpit_storage()

        b.switch_to_frame("cockpit-storage")

        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.confirm()

        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        self.dialog({"size": 100, "type": "efi", "mount_point": "/boot/efi"})

        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        self.click_dropdown(self.card_row("Storage", 4), "Create partition")
        self.dialog({"type": "btrfs", "mount_point": "/"})

        # Exit the cockpit-storage iframe
        b.switch_to_top()

        s.return_to_installation()
        s.return_to_installation_confirm()

        s.set_scenario("use-configured-storage")

        i.reach(i.steps.REVIEW)

        # verify review screen
        dev = "vda"
        r.check_disk(dev, "16.1 GB vda (Virtio Block Device)")

        r.check_disk_row(dev, "/boot/efi", "vda1", "99.6 MB", False)
        r.check_disk_row(dev, "/boot", "vda2", "1.07 GB", False)
        r.check_disk_row(dev, "/", "vda3", "14.9 GB", False, None, False, 4)

        # Check fstab
        fstab = m.execute("cat /etc/fstab")
        self.assertTrue("/mnt/sysroot/boot/efi auto noauto 0 0" in fstab)
        self.assertTrue("/mnt/sysroot/boot auto noauto 0 0" in fstab)
        self.assertTrue("/mnt/sysroot auto noauto,subvol=/ 0 0" in fstab)

    @nondestructive
    def testBtrfsSubvolumes(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        tmp_mount = "/btrfs-mount-test"

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.wait_scenario_visible("use-configured-storage", False)
        s.check_disk_selected("vda")
        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.wait_visible(".cockpit-storage-integration-sidebar")

        frame = "iframe[name='cockpit-storage']"
        b._wait_present(frame)
        b.switch_to_frame("cockpit-storage")
        b._wait_present("#storage.ct-page-fill")

        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.confirm()

        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        self.dialog({"size": 1, "type": "biosboot"})

        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        self.click_dropdown(self.card_row("Storage", 4), "Create partition")
        self.dialog({"type": "btrfs"})

        self.click_card_row("Storage", name="top-level")

        b.click(self.card_button("btrfs subvolume", "Mount"))
        self.dialog({"mount_point": tmp_mount})

        b.click(self.card_button("btrfs subvolume", "Create subvolume"))
        self.dialog({"name": "root", "mount_point": "/"})

        b.click(self.card_button("btrfs subvolume", "Create subvolume"))
        self.dialog({"name": "unused"})

        b.click(self.card_button("btrfs subvolume", "Create subvolume"))
        self.dialog({"name": "home", "mount_point": "/home"})

        # Exit the cockpit-storage iframe
        b.switch_to_top()

        s.return_to_installation()
        s.return_to_installation_confirm()

        s.set_scenario("use-configured-storage")

        i.reach(i.steps.REVIEW)

        # verify review screen
        dev = "vda"
        r.check_disk(dev, "16.1 GB vda (Virtio Block Device)")

        r.check_disk_row(dev, "/boot", "vda2", "1.07 GB", False)
        r.check_disk_row(dev, "/", "vda3", "15.0 GB", False, None, False, 3)
        r.check_disk_row(dev, "/home", "vda3", "15.0 GB", False)

        # Check fstab
        fstab = m.execute("cat /etc/fstab")
        self.assertTrue("/mnt/sysroot/boot auto noauto 0 0" in fstab)
        self.assertTrue("/mnt/sysroot/btrfs-mount-test auto subvol=/ 0 0" in fstab)
        self.assertTrue("/mnt/sysroot btrfs noauto,subvol=root 0 0" in fstab)
        self.assertTrue("/mnt/sysroot/home btrfs noauto,subvol=home 0 0" in fstab)

    @nondestructive
    def testBtrfsAndMountPointAssignment(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        tmp_mount = "/btrfs-mount-test"

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.wait_scenario_visible("use-configured-storage", False)
        s.check_disk_selected("vda")
        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.wait_visible(".cockpit-storage-integration-sidebar")

        frame = "iframe[name='cockpit-storage']"
        b._wait_present(frame)
        b.switch_to_frame("cockpit-storage")
        b._wait_present("#storage.ct-page-fill")

        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.confirm()

        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        self.dialog({"size": 1, "type": "biosboot"})

        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        self.click_dropdown(self.card_row("Storage", 4), "Create partition")
        self.dialog({"type": "btrfs"})

        self.click_card_row("Storage", name="top-level")

        b.click(self.card_button("btrfs subvolume", "Mount"))
        self.dialog({"mount_point": tmp_mount})

        b.click(self.card_button("btrfs subvolume", "Create subvolume"))
        self.dialog({"name": "root", "mount_point": "/"})

        b.click(self.card_button("btrfs subvolume", "Create subvolume"))
        self.dialog({"name": "unused"})

        b.click(self.card_button("btrfs subvolume", "Create subvolume"))
        self.dialog({"name": "home", "mount_point": "/home"})

        # Exit the cockpit-storage iframe
        b.switch_to_top()

        s.return_to_installation()
        s.return_to_installation_confirm()

        s.set_scenario("mount-point-mapping")

        i.next(next_page=i.steps.CUSTOM_MOUNT_POINT)

        s.check_mountpoint_row(1, "/", "root", True, "btrfs")
        s.check_mountpoint_row(2, "/boot", "vda2", False, "ext4")
        s.check_mountpoint_row(3, "/home", "home", False, "btrfs")

        s.select_mountpoint_row_reformat(1)
        s.select_mountpoint_row_reformat(2)
        s.select_mountpoint_row_reformat(3, False)

        # Root should be preselected to reformat
        s.check_mountpoint_row(1, "/", "root", True, "btrfs")
        s.check_mountpoint_row(2, "/boot", "vda2", True, "ext4")
        s.check_mountpoint_row(3, "/home", "home", False, "btrfs")

        i.reach(i.steps.REVIEW)

        # verify review screen
        dev = "vda"
        r.check_disk(dev, "16.1 GB vda (Virtio Block Device)")

        r.check_disk_row(dev, "/boot", "vda2", "1.07 GB", True, "ext4")
        r.check_disk_row(dev, "/", "vda3", "15.0 GB", True, "btrfs")
        r.check_disk_row(dev, "/home", "vda3", "15.0 GB", False)

        # Check fstab
        fstab = m.execute("cat /etc/fstab")
        self.assertTrue("/mnt/sysroot/boot auto noauto 0 0" in fstab)
        self.assertTrue("/mnt/sysroot/btrfs-mount-test auto subvol=/ 0 0" in fstab)
        self.assertTrue("/mnt/sysroot btrfs noauto,subvol=root 0 0" in fstab)
        self.assertTrue("/mnt/sysroot/home btrfs noauto,subvol=home 0 0" in fstab)

    @disk_images([("", 15), ("", 15), ("", 15)])
    def testRAIDUnsupported(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.select_disks([("vdb", True), ("vda", True), ("vdc", True)])

        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.switch_to_frame("cockpit-storage")

        # Create BIOS and boot partitions on vdb
        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.confirm()

        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        self.dialog({"size": 1, "type": "biosboot"})

        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        self.click_dropdown(self.card_row("Storage", 4), "Create partition")
        self.dialog({ "type": "empty"})

        # Create partitions for the RAID device on vdb and vdc
        self.click_dropdown(self.card_row("Storage", 5), "Create partition table")
        self.dialog({"type": "gpt"})
        self.click_dropdown(self.card_row("Storage", 6), "Create partition")
        self.dialog({"type": "empty"})

        self.click_dropdown(self.card_row("Storage", 7), "Create partition table")
        self.dialog({"type": "gpt"})
        self.click_dropdown(self.card_row("Storage", 8), "Create partition")
        self.dialog({"type": "empty"})

        # Create RAID1 on vda
        self.click_dropdown(self.card_header("Storage"), "Create MDRAID device")
        self.dialog_wait_open()
        self.dialog_set_val("level", "raid0")
        self.dialog_set_val("disks", {"vda3": True, "vdb1": True, "vdc1": True})
        self.dialog_set_val("name", "SOMERAID")
        self.dialog_apply()
        self.dialog_wait_close()
        b.wait_visible(self.card_row("Storage", name="/dev/md/SOMERAID"))

        # Create biosboot, /boot and / partitions on the RAID device
        self.click_dropdown(self.card_row("Storage", name="/dev/md/SOMERAID"), "Create partition table")
        self.dialog({"type": "gpt"})
        self.click_dropdown(self.card_row("Storage", name="Free space"), "Create partition")
        self.dialog({"type": "ext4", "mount_point": "/"})

        # Exit the cockpit-storage iframe and return to installation
        b.switch_to_top()
        s.return_to_installation("Invalid RAID configuration detected.")

    @nondestructive
    @disk_images([("", 15), ("", 15), ("", 15)])
    def testRAIDonDisks(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        self.addCleanup(m.execute, "mdadm --zero-superblock /dev/vda /dev/vdb /dev/vdc")
        self.addCleanup(m.execute, "mdadm --stop /dev/md/SOMERAID")

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.select_disks([("vdb", True), ("vda", True), ("vdc", True)])

        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.switch_to_frame("cockpit-storage")

        # Create RAID device on vda, vdb, and vdc
        self.click_dropdown(self.card_header("Storage"), "Create MDRAID device")
        self.dialog_wait_open()
        self.dialog_set_val("level", "raid0")
        self.dialog_set_val("disks", {"vda": True, "vdb": True, "vdc": True})
        self.dialog_set_val("name", "SOMERAID")
        self.dialog_apply()
        self.dialog_wait_close()

        # Create biosboot, /boot and / partitions on the RAID device
        self.click_dropdown(self.card_row("Storage", 4), "Create partition table")
        self.dialog({"type": "gpt"})
        self.click_dropdown(self.card_row("Storage", 5), "Create partition")
        self.dialog({"size": 1, "type": "biosboot"})
        self.click_dropdown(self.card_row("Storage", 6), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})
        self.click_dropdown(self.card_row("Storage", 7), "Create partition")
        self.dialog({"type": "ext4", "mount_point": "/"})

        # Exit the cockpit-storage iframe and return to installation
        b.switch_to_top()
        s.return_to_installation()

        with b.wait_timeout(60):
            disk = "MDRAID-SOMERAID"
            prefix="#cockpit-storage-integration-check-storage-dialog"
            r.check_disk_row(disk, "/boot", "SOMERAID2, RAID", "1.07 GB", False, prefix=prefix)
            r.check_disk_row(disk, "/", "SOMERAID3, RAID", "47.2 GB", False, prefix=prefix)

        s.return_to_installation_confirm()

        s.set_scenario("use-configured-storage")

        i.reach(i.steps.REVIEW)

        def checkStorageReview(prefix=""):
            with b.wait_timeout(30):
                r.check_disk(disk, "48.3 GB MDRAID-SOMERAID (MDRAID set (stripe))")
            r.check_disk_row(disk, "/boot", "SOMERAID2, RAID", "1.07 GB", False, prefix=prefix)
            r.check_disk_row(disk, "/", "SOMERAID3, RAID", "47.2 GB", False, prefix=prefix)

        # verify review screen
        checkStorageReview()

        # Go back and choose 'Mount point mapping' scenario
        i.reach_on_sidebar(i.steps.INSTALLATION_METHOD)
        s.set_scenario("mount-point-mapping")
        i.next(next_page=i.steps.CUSTOM_MOUNT_POINT)
        s.check_mountpoint_row(1, "/", "SOMERAID3", False, "ext4")
        s.check_mountpoint_row(2, "/boot", "SOMERAID2", False, "ext4")

    @nondestructive
    @disk_images([("", 15), ("", 15), ("", 15)])
    def testRAIDAutomatic(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        self.addCleanup(m.execute, "mdadm --zero-superblock /dev/vda /dev/vdb /dev/vdc")
        self.addCleanup(m.execute, "mdadm --stop /dev/md/SOMERAID")

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.select_disks([("vdb", True), ("vda", True), ("vdc", True)])

        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.switch_to_frame("cockpit-storage")

        # Create RAID device on vda, vdb, and vdc
        self.click_dropdown(self.card_header("Storage"), "Create MDRAID device")
        self.dialog_wait_open()
        self.dialog_set_val("level", "raid0")
        self.dialog_set_val("disks", {"vda": True, "vdb": True, "vdc": True})
        self.dialog_set_val("name", "SOMERAID")
        self.dialog_apply()
        self.dialog_wait_close()

        # Exit the cockpit-storage iframe and return to installation
        b.switch_to_top()
        s.return_to_installation()
        s.return_to_installation_confirm()

        s.check_scenario_selected("erase-all")
        i.reach(i.steps.REVIEW)

        disk = "MDRAID-SOMERAID"
        with b.wait_timeout(30):
            r.check_disk(disk, "48.3 GB MDRAID-SOMERAID (MDRAID set (stripe))")
        r.check_disk_row(disk, "/boot", "SOMERAID2, RAID", "1.07 GB", True, "xfs")
        r.check_disk_row(disk, "/", "SOMERAID3, LVM", "16.1 GB", True, "xfs")


if __name__ == '__main__':
    test_main()
