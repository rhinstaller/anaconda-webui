#!/usr/bin/python3
#
# Copyright (C) 2022 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

import anacondalib

from installer import Installer
from storage import Storage
from testlib import nondestructive, test_main  # pylint: disable=import-error


@nondestructive
class TestStorage(anacondalib.VirtInstallMachineCase):

    def testLocalStandardDisks(self):
        b = self.browser
        i = Installer(b, self.machine)
        s = Storage(b, self.machine)

        i.open()
        i.next()

        b.wait_visible('section:contains(Local standard disks)')

        # Check disks table details
        s.check_disk_visible("vda")
        s.check_disk_capacity("vda", "16.1 GB", "16.1 GB")

        # Pixel test the storage step
        b.assert_pixels(
            "#app",
            "storage-step-basic",
            ignore=["#betanag-icon", "#installation-destination-table-label", "#installation-destination-hint"],
            wait_animations=False,
        )

        # Check bulk selection of disks
        s.select_all_disks_and_check(["vda"])
        s.select_none_disks_and_check(["vda"])

        s.click_checkbox_and_check_all_disks(["vda"], selected=True)
        s.click_checkbox_and_check_all_disks(["vda"], selected=False)

        # Try unselecting the single disk and expect and error
        s.select_disk("vda", False)
        s.wait_no_disks()
        # Check the next button is disabled if no disks are selected
        i.check_next_disabled()

    # Test moving back and forth between screens.
    # Disk initialization mode is applied to the backend in the test.
    # Partitioning is not applied to the backend in the test.
    def testAutopartitioning(self):
        b = self.browser
        i = Installer(b, self.machine)
        s = Storage(b, self.machine)

        # Reset the state of the backend
        # CLEAR_PARTITIONS_DEFAULT = -1
        s.dbus_set_initialization_mode(-1)

        i.open()
        # Language selection

        i.next()
        # Storage Devices

        i.next()
        # Storage Configuration

        # Check the default mode
        s.check_partitioning_selected("erase-all")

        b.assert_pixels(
            "#app",
            "storage-step-autopart",
            ignore=["#betanag-icon"],
            wait_animations=False,
        )

        s.set_partitioning("use-free-space")

        i.next()
        # Disk Encryption

        b.assert_pixels(
            "#app",
            "storage-step-encrypt",
            ignore=["#betanag-icon"],
            wait_animations=False,
        )

        s.check_encryption_selected(False)
        encrypt = True
        s.set_encryption_selected(encrypt)

        i.back()
        # Storage Configuration
        # The choice is preserved (stored in the backend).
        s.check_partitioning_selected("use-free-space")

        i.next()
        # Disk Encryption
        # The value is preserved
        s.check_encryption_selected(encrypt)

        # Encryption password is on the same page
        i.next(subpage=encrypt)
        # Disk Encryption / password screen

        b.assert_pixels(
            "#app",
            "storage-step-password",
            ignore=["#betanag-icon"],
            wait_animations=False,
        )

        # No password set
        s.check_pw_rule("8-chars", "indeterminate")
        s.check_pw_rule("match", "indeterminate")
        i.check_next_disabled()

        # Set pw which is too short
        s.set_password("abcd")
        s.check_pw_strength(None)
        i.check_next_disabled()
        s.check_pw_rule("8-chars", "error")
        s.check_pw_rule("match", "error")

        # Make the pw 8 chars long
        s.set_password("efgh", append=True, value_check=False)
        i.check_next_disabled()
        s.check_password("abcdefgh")
        s.check_pw_rule("8-chars", "success")
        s.check_pw_rule("match", "error")
        s.check_pw_strength("weak")

        # Set the password confirm
        s.set_password_confirm("abcdefg")
        s.check_pw_rule("match", "error")
        s.set_password_confirm("abcdefgh")
        s.check_pw_rule("match", "success")
        i.check_next_disabled(disabled=False)

        # Check the values are preserved on Back and Next
        i.back(subpage=True)
        i.next(subpage=encrypt)
        s.check_pw_rule("8-chars", "success")
        s.check_pw_rule("match", "success")
        s.check_pw_strength("weak")
        s.check_password("abcdefgh")
        s.check_password_confirm("abcdefgh")
        i.check_next_disabled(disabled=False)

        # Check setting strong password
        s.set_password("Rwce82ybF7dXtCzFumanchu!!!!!!!!")
        s.check_pw_strength("strong")

    # Test moving back after partitioning is applied,
    # the partitioning should be reset.
    def testAutopartitioningReset(self):
        b = self.browser
        i = Installer(b, self.machine)
        s = Storage(b, self.machine)

        # Reset the state of the backend
        # CLEAR_PARTITIONS_DEFAULT = -1
        s.dbus_set_initialization_mode(-1)

        i.open()
        # Language selection

        i.next()
        # Storage Devices

        i.next()
        # Storage Configuration

        # Check the default mode
        s.check_partitioning_selected("erase-all")

        s.set_partitioning("use-free-space")

        i.next()
        # Disk Encryption

        encrypt = True
        s.set_encryption_selected(encrypt)
        s.check_encryption_selected(encrypt)

        # Encryption password is on the same page
        i.next(subpage=encrypt)
        # Disk Encryption / password screen

        # Set valid password
        pw = "abcdefgh"
        s.set_password_confirm(pw)
        s.check_password_confirm(pw)
        s.set_password(pw)
        s.check_password(pw)

        i.check_next_disabled(disabled=False)

        i.next()
        # Review screen

        i.back()
        # Disk Encryption / password screen
        s.check_password_confirm(pw)
        s.check_password(pw)

        i.back(subpage=encrypt)
        # Disk Encryption
        s.check_encryption_selected(encrypt)

        i.back()
        # Storage Configuration
        # The choice is preserved (stored in the backend).
        # The choice is available only if the partitioning was reset
        # (there is enough free space)
        s.check_partitioning_selected("use-free-space")


# We can't run this test case on an existing machine,
# with --machine because MachineCase is not aware of add_disk method
# TODO add next back test keeping the choice
class TestStorageExtraDisks(anacondalib.VirtInstallMachineCase):

    def testLocalDisksSyncNew(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)

        # This attaches a disk to the running VM
        # However, since the storage module initialization is long completed
        # the newly added disk, will not be visible in the UI,
        # until the test clicks on the re-scan button
        m.add_disk(2)

        i.open()
        i.next()

        s.wait_no_disks_detected_not_present()

        s.check_disk_visible("vda")
        s.check_disk_visible("vdb", False)

        s.rescan_disks()
        s.check_disk_visible("vda")
        s.check_disk_visible("vdb")

        s.wait_no_disks_detected_not_present()

        s.check_disk_selected("vda", False)
        s.check_disk_selected("vdb", False)

        s.rescan_disks()
        s.wait_no_disks_detected()

        # Check that disk selection is kept on Next and Back
        disks = ["vdb"]
        for disk in disks:
            s.select_disk(disk)
        i.next()
        i.back()
        for disk in disks:
            s.check_disk_selected(disk)


if __name__ == '__main__':
    test_main()
