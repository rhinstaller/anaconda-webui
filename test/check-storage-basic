#!/usr/bin/python3
#
# Copyright (C) 2022 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

import os

from anacondalib import VirtInstallMachineCase, pixel_tests_ignore, test_plan
from installer import Installer
from password import Password
from progress import Progress
from review import Review
from storage import Storage
from storagelib import StorageHelpers  # pylint: disable=import-error
from testlib import nondestructive, test_main  # pylint: disable=import-error
from utils import get_pretty_name

TEST_DIR = os.path.dirname(__file__)
ROOT_DIR = os.path.dirname(TEST_DIR)
BOTS_DIR = f'{ROOT_DIR}/bots'


class TestStorage(VirtInstallMachineCase, StorageHelpers):

    @nondestructive
    def testLocalStandardDisks(self):
        b = self.browser
        i = Installer(b, self.machine)
        s = Storage(b, self.machine)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        # Check the auto-selected disk's details
        s.wait_no_disks_detected_not_present()
        s.check_single_disk_destination("vda", "16.1 GB")

        # Pixel test the storage step
        b.assert_pixels(
            "#app",
            "storage-step-basic",
            ignore=pixel_tests_ignore,
        )

        # This attaches a disk to the running VM
        # However, since the storage module initialization is long completed
        # the newly added disk, will not be visible in the UI,
        # until the test clicks on the re-scan button
        dev = self.add_ram_disk(2)
        dev = dev.split("/")[-1]
        s.rescan_disks()

        s.check_disk_visible("vda")
        s.check_disk_visible(dev)

        # Check the newly added disk generated a notification
        s.wait_disk_added(dev)

        # Check that the disk selection persists when moving next and back
        s.check_disk_selected("vda", True)
        s.check_disk_selected(dev, False)
        i.next()
        i.back()
        s.check_disk_selected("vda", True)
        s.check_disk_selected(dev, False)

        # Try unselecting the single disk and expect and error
        s.select_disk("vda", False)
        s.wait_no_disks()
        # Check the next button is disabled if no disks are selected
        i.check_next_disabled()

        # Check that disk selection is kept on Next and Back
        s.select_disk(dev, True)
        s.select_disk("vda", True)
        i.next()
        i.back()
        for disk in ["vda", dev]:
            s.check_disk_selected(disk)

        # Check clear selection of disks
        s.select_none_disks_and_check([dev, "vda"])

    @nondestructive
    def testScenarioSelection(self):
        """
        Test that the use-free-space scenario is conditionally available
        and the the user selection for scenario is kept when moving back and forth
        between screens
        """
        b = self.browser
        i = Installer(b, self.machine)
        s = Storage(b, self.machine)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        # Check the default mode
        s.check_partitioning_selected("erase-all")

        # Check that when an unpartitioned disk is selected the "Use free space" scenario is hidden
        s.wait_scenario_visible("use-free-space", False)

        # Check that when a partitioned disk is selected the "Use free space" scenario is visible
        s.add_basic_partitioning()
        s.wait_scenario_visible("use-free-space")

        # Storage Configuration
        # The choice is preserved (stored in the backend).
        # The choice is available only if the partitioning was reset
        # (there is enough free space)
        s.set_partitioning("use-free-space")
        i.next()
        i.back()
        s.check_partitioning_selected("use-free-space")

    @nondestructive
    def testPartitioningObject(self):
        # Test which partitioning object ends up being the AppliedPartitioning
        # when we go back and forward the storage steps

        b = self.browser
        i = Installer(b, self.machine)
        s = Storage(b, self.machine)

        # Read partitioning data before we do anything
        created_partitioning = s.dbus_get_created_partitioning()

        # Go to Review step
        i.open()
        i.reach(i.steps.REVIEW)

        # Read partitioning data after we went to Review step
        new_applied_partitioning = s.dbus_get_applied_partitioning()
        new_created_partitioning = s.dbus_get_created_partitioning()

        # A new AUTOMATIC partitioning object should be created each time the user enters the review page
        self.assertEqual(len(created_partitioning) + 1, len(new_created_partitioning))
        # The applied partitioning object should be the last one created
        self.assertEqual(new_applied_partitioning, new_created_partitioning[-1])

        created_partitioning = new_created_partitioning

        # Create a few partitioning objects and ensure that these will not mess up with the user's
        # configuration
        for _ in range(10):
            s.dbus_create_partitioning("AUTOMATIC")

        # Go back to the Disk Configuration page and re-enter the review screen.
        # This should create again a new partitioning object and apply it
        # no matter how many partitioning objects were created before
        i.reach_on_sidebar(i.steps.INSTALLATION_METHOD)
        i.reach(i.steps.REVIEW)
        new_applied_partitioning = s.dbus_get_applied_partitioning()
        new_created_partitioning = s.dbus_get_created_partitioning()

        self.assertEqual(len(created_partitioning) + 11, len(new_created_partitioning))
        self.assertEqual(new_applied_partitioning, new_created_partitioning[-1])

        # The applied partitioning should be reset also when going back to installation method
        i.click_step_on_sidebar(i.steps.INSTALLATION_METHOD)
        new_applied_partitioning = s.dbus_get_applied_partitioning()
        self.assertEqual(new_applied_partitioning, "")

    def testCockpitJsErrorHandling(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)

        # Clean up the journal before we open Report dialog
        # (Report dialog presents all journal in a textarea)
        # to avoid crashing the test browser
        m.execute("journalctl --rotate; journalctl --vacuum-time=1s")

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.wait_visible(".cockpit-storage-integration-sidebar")
        b._wait_present("iframe[name='cockpit-storage']")
        b.switch_to_frame("cockpit-storage")
        b._wait_present("#storage.ct-page-fill")

        b.wait_not_present("#critical-error-bz-report-modal.pf-v5-c-modal-box")

        with self.assertRaises(RuntimeError):
            b.eval_js("window.setTimeout(function() {throw new Error('Unexpected storage JS error')}, 0);")
            b.wait_in_text("#critical-error-bz-report-modal-details", "Unexpected storage JS error")
            b.wait_in_text("#critical-error-bz-report-modal header", "The installer cannot continue due to a critical error: Storage plugin failed")

@nondestructive
class TestMultipleDisks(VirtInstallMachineCase, StorageHelpers):

    def _testDiskSelectionLVM(self, encrypted=False):
        """
        Test that the user can't select one PV when VG group spans across multiple disks
        """

        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)

        self.add_disk(15)

        s.partition_disk("/dev/vda", [("10GB", "lvmpv")])
        s.partition_disk("/dev/vdb", [("10GB", "lvmpv")])

        if encrypted:
            # Create VG on LUKS with the two available disks
            m.execute("""
            echo einszwei | cryptsetup luksFormat /dev/vda1
            echo einszwei | cryptsetup luksFormat /dev/vdb1
            echo einszwei | cryptsetup luksOpen /dev/vda1 encrypted-vol-a
            echo einszwei | cryptsetup luksOpen /dev/vdb1 encrypted-vol-b
            vgcreate -y vg /dev/mapper/encrypted-vol-a /dev/mapper/encrypted-vol-b
            lvcreate -y -n lv -l 100%FREE vg
            mkfs.ext4 -F /dev/vg/lv
            vgchange -a n vg
            cryptsetup close encrypted-vol-a
            cryptsetup close encrypted-vol-b
            """)
        else:
            # Create VG with the two available disks
            m.execute("""
            vgcreate -y vg /dev/vda1 /dev/vdb1
            lvcreate -y -n lv -l 100%FREE vg
            mkfs.ext4 -F /dev/vg/lv
            vgchange -a n vg
            """)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.rescan_disks()
        i.reach(i.steps.DISK_ENCRYPTION)
        i.next(should_fail=True)
        b.wait_in_text("#disk-encryption-step-notification", "Selected disks vda contain volume group 'vg' that also uses further unselected disks")

    def testDiskSelectionLVM(self):
        self._testDiskSelectionLVM()

    def testDiskSelectionLVMonLUKS(self):
        self._testDiskSelectionLVM(encrypted=True)


class TestFedoraPlansEraseAll(VirtInstallMachineCase, StorageHelpers):
    """
    Test Fedora plans: https://fedoraproject.org/wiki/Test_Results:Current_Installation_Test

    These tests are based on the Fedora QA test plans for installation.

    All tests below are destructive as they complete the installation process.
    """

    @test_plan("https://fedoraproject.org/wiki/QA:Testcase_partitioning_guided_encrypted")
    def testGuidedEncrypted(self):
        b = self.browser
        i = Installer(b, self.machine)
        r = Review(b, self.machine)
        s = Storage(b, self.machine)
        p = Password(b, s.encryption_id_prefix)
        pro = Progress(b)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)

        # Check the default mode
        s.check_partitioning_selected("erase-all")

        i.next()
        # Disk Encryption
        s.set_encryption_selected(True)
        strong_password = "Rwce82ybF7dXtCzFumanchu!!!!!!!!"
        p.set_password(strong_password)
        p.set_password_confirm(strong_password)

        # Reboot and check installed system
        i.reach(i.steps.REVIEW)
        r.check_checkbox_not_present()
        i.begin_installation(needs_confirmation=False)
        pro.wait_done()
        s.unlock_storage_on_boot(strong_password)
        self.handleReboot()
        s.check_post_install_encryption_enabled()

        # Check that the expected partition layout is created on the selected device
        lsblk = s.get_lsblk_json()
        block_devs = lsblk["blockdevices"]
        vda = next(dev for dev in block_devs if dev["name"] == "vda")
        vda3 = next(part for part in vda["children"] if part["name"] == "vda3")
        vda3_luks = next(part for part in vda3["children"] if part["type"] == "crypt")
        vda3_root = next(part for part in vda3_luks["children"] if "/" in part["mountpoints"])
        self.assertEqual(vda3_root["size"], "14G")

    @test_plan("https://fedoraproject.org/wiki/QA:Testcase_partitioning_guided_multi_select")
    def testGuidedMultiSelect(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)
        p = Progress(b)

        self.add_disk(15, os.path.join(BOTS_DIR, "./images/debian-stable"))

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.rescan_disks()

        s.check_disk_selected("vda", True)
        s.check_disk_selected("vdb", False)

        i.reach(i.steps.REVIEW)
        r.check_checkbox_not_present()
        i.begin_installation(needs_confirmation=False)
        p.wait_done()

        self.handleReboot()

        # Expect the new OS is the default grub entry
        pretty_name = get_pretty_name(m)
        self.assertIn("Fedora Linux", pretty_name)

        # Check that the expected partition layout is created on the selected device
        lsblk = s.get_lsblk_json()
        block_devs = lsblk["blockdevices"]
        vda = next(dev for dev in block_devs if dev["name"] == "vda")
        vda3 = next(part for part in vda["children"] if part["name"] == "vda3")
        vda3_root = next(part for part in vda3["children"] if "/" in part["mountpoints"])
        self.assertEqual(vda3_root["size"], "14G")

        vdb = next(dev for dev in block_devs if dev["name"] == "vdb")
        vdb_mountpoints = [part["mountpoints"][0] for part in vdb["children"]]
        self.assertEqual(vdb_mountpoints, [None] * len(vdb_mountpoints))

        m.reboot()
        self.selectBootMenuEntry(2)
        # FIXME: Debian will not boot unless we remove the vda disk
        # pretty_name = get_pretty_name(m)
        # self.assertIn("Debian GNU/Linux", pretty_name)

    @test_plan("https://fedoraproject.org/wiki/QA:Testcase_partitioning_guided_multi_empty_all")
    def testGuidedMultiEmptyAll(self):
        b = self.browser
        m = self.machine
        i = Installer(b, self.machine)
        r = Review(b, m)
        s = Storage(b, self.machine)
        p = Progress(b)

        self.add_disk(15)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.rescan_disks()

        s.check_disk_selected("vda", True)
        s.select_disk("vdb", True)

        i.reach(i.steps.REVIEW)
        r.check_checkbox_not_present()
        i.begin_installation(needs_confirmation=False)
        p.wait_done()

        self.handleReboot()

        # Expect the new OS is the default grub entry
        pretty_name = get_pretty_name(m)
        self.assertIn("Fedora Linux", pretty_name)

        # Check that the expected partition layout is created and spans all the target devices
        lsblk = s.get_lsblk_json()
        block_devs = lsblk["blockdevices"]
        vda = next(dev for dev in block_devs if dev["name"] == "vda")
        vdb = next(dev for dev in block_devs if dev["name"] == "vdb")
        vda3 = next(part for part in vda["children"] if part["name"] == "vda3")
        vdb1 = next(part for part in vdb["children"] if part["name"] == "vdb1")
        vda3_root = next(part for part in vda3["children"] if "/" in part["mountpoints"])
        vdb1_root = next(part for part in vdb1["children"] if "/" in part["mountpoints"])
        self.assertEqual(vda3_root["size"], "15G")
        self.assertEqual(vdb1_root["size"], "15G")


if __name__ == '__main__':
    test_main()
